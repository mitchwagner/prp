* February 22, 2018
- QuickLinkerConcat has some subtle errors due to floating point.
  In this algorithm, we combine the results for multiple regular expressions,
  concatenating one set after another. When we aggregate over folds, we
  use the cost/score associated with each row to re-rank the rows, and then
  use the resulting ranked rows to calculate precision/recall. To prioritize
  one regex's results before all the others (even across folds), we add 
  a number to this score for each row before aggregation (for 3 regexes, the
  first gets + 2, the second gets + 1, the third gets + 0).

  By adding to the floating point numbers, due to rounding error, floating
  points numbers that were only very slightly different before the addition
  might get the same rank after the addition. In other words, 1 + x = 1 + y

* February 19, 2018
- I learned today that the node file for EGFR has the same protein
  listed TWICE: that protein is P19838. One row has it as a TF, and
  one has it as none. I am not sure what to do here, and need to ask
  Murali about this. If it is meant to be a TF, it is getting messed 
  up in my pipeline currently, which assumes that each node is listed
  only ONCE in the node file.

* January 24, 2018
- Today, while creating an interactome by adding missing edges from the 
  Netpath pathways, I noticed that, similar to the Kit pathway (see
  January 9) TCR and the TGF_beta_receptor pathway have nodes named "-".
  For now, this is mostly just an annoyance, but it does mean the scripts
  for posting to GraphSpace might be slightly incorrect. 

  I also don't have a good idea of what these nodes are supposed to be.

* January 23
- In our last meeting, we discussed the possibility that we where maybe 
  not thinking our precision/recall calculation through. In particular, each
  fold consists of a list of positives and negatives to train on. However,
  when we run the algorithm all the negatives (those in the fold and those 
  not in the fold) are given the label n (as are the test positives), 
  while the list of training positives are given the label p.

  After discussing for a while, we decided that we would probably not improve
  precision/recall by labeling training edges with a different label, like "x".
  This is 1) because you might need to go through an "x" to get to a "p"
  anyway, and 2) we aren't using the "x"s in the calculation of a particular
  fold anyway.


* January 10, 2018
- I emailed one of the original authors of FAdo asking their thoughts on the
  .tablereg file. 

* January 9, 2018
- I found an edge in the KitReceptor pathway nodes/edges file that Anna used.
  The name of this node was "--" and in the node file, it had no node type.  I
  am changing the name of this node to comply with Jeff's GraphSpace posting
  script, which identifies the nodes in an edge by the delimiting character
  "-".

- I also found a file, .tablereg, which seems to have been left by FAdo.  I did
  a search on Google, and I found a GitHub repository for FAdo. I'm not sure if
  it is the original repository for FAdo or not (pypi would seem to indicate
  otherwise). Regardless, I left an issue:

  https://github.com/Glavin001/FAdo/issues/3

  For now, I am operating under the assumption that this file is not that
  important and shouldn't pose a threat to parallelization. This could be an
  erroneous assumption.

- Update: The author of the repo actually got back to me fairly quickly. While
  he is not the original author, he looked into the code and does believe the
  code could be problematic if parallelized. 

* October 19, 2017
- The old PathLinker script in Anna's directory, by default, divided all edge
  weights by the sum of the weight of all edges. If you think about it, this
  minimizes the any importance of edge weight at all, given the negative log
  transform of edge weights. By removing the depedence of the master script on
  the EXACT version Anna was referencing, I've removed the ability to
  automatically recreate this effect.

  If you want to recreate this parameter, you can now pass a very large value
  for the edge penalty to PathLinker. However, at the moment, the ability to
  pass an edge penalty is not possible in our master script. It might be
  worthwhile to write some sort of JSON config file parser that reads in
  parameters for every algorithm. It's getting to the point where the user is
  absolutely inundated with switches to provide the program.

* September 27, 2017
- I refactored the minimum cut computation in the main PathLinker script. One
  possibly important change is that before, it was only being run if the
  directory did not already exist. I decided to eschew this notion, and always
  recompute it, because we didn't have checks on if the parameters themselves
  were actually changing.
